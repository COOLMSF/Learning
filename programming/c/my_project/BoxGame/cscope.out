cscope 15 $HOME/Learning/Programming/C_Cpp/MyProject/BoxGame -q 0000000047 0000004805
	@box.h

5 
	~<ãrmios.h
>

7 #i‚de‡
SNAKEGAME_SNAKE_H


9 
	#SNAKEGAME_SNAKE_H


	)

10 
	#MAX_WIDTH
 8

	)

11 
	#MAX_HIGHT
 8

	)

22 
nbox
;

23 
m≠
[
MAX_WIDTH
][
MAX_HIGHT
];

24 
ãrmios
 
ﬁd
, 
cuºít
;

25 
my_x
, 
my_y
;

27 
sig_h™dÀr
();

29 
öô
();

31 
¥öt_ußge
();

32 
¥öt_m≠
();

34 
move_up
();

35 
move_down
();

36 
move_À·
();

37 
move_right
();

39 
öôTîmios
(
echo
);

40 
ª£tTîmios
();

41 
gëch_
(
echo
);

42 
mygëch
();

	@getch.c

5 
	~"Ælhódîs.h
"

7 
ãrmios
 
	gﬁd
, 
	gcuºít
;

10 
	$öôTîmios
(
echo
)

12 
	`tcgë©å
(0, &
ﬁd
);

13 
cuºít
 = 
ﬁd
;

14 
cuºít
.
c_lÊag
 &~
ICANON
;

15 i‡(
echo
) {

16 
cuºít
.
c_lÊag
 |
ECHO
;

18 
cuºít
.
c_lÊag
 &~
ECHO
;

20 
	`tc£èâr
(0, 
TCSANOW
, &
cuºít
);

21 
	}
}

24 
	$ª£tTîmios
()

26 
	`tc£èâr
(0, 
TCSANOW
, &
ﬁd
);

27 
	}
}

30 
	$gëch_
(
echo
)

32 
ch
;

33 
	`öôTîmios
(
echo
);

34 
ch
 = 
	`gëch¨
();

35 
	`ª£tTîmios
();

36  
ch
;

37 
	}
}

40 
	$mygëch
()

42  
	`gëch_
(0);

43 
	}
}

	@init.c

4 
	~"box.h
"

6 
	gmy_x
, 
	gmy_y
;

8 
	$öô
()

10 
i
 = 0; i < 
MAX_WIDTH
; ++i) {

11 
j
 = 0; j < 
MAX_HIGHT
; ++j) {

14 i‡('w' =
m≠
[
i
][
j
]) {

15 
my_x
 = 
i
;

16 
my_y
 = 
j
;

20 i‡('*' =
m≠
[
i
][
j
])

21 
nbox
++;

24 
	}
}

	@main.c

1 
	~"box.h
"

2 
	~"Ælhódîs.h
"

4 
	gnbox
 = 0;

6 
	gm≠
[
MAX_WIDTH
][
MAX_HIGHT
] = {

17 
	$maö
()

19 
c
;

22 
	`sig«l
(
SIGINT
, (
__sigh™dÀr_t
Ë
sig_h™dÀr
);

25 
	`öô
();

26 
	`¥öt_ußge
();

29 
	`sy°em
("clear");

30 
	`¥öt_m≠
();

32 i‡(0 =
nbox
) {

33 
	`puts
("YOU WIN !!!");

34 
	`exô
(
EXIT_SUCCESS
);

37 
c
 = 
	`mygëch
();

40 
c
) {

41 'k': 
	`move_up
();

43 'j': 
	`move_down
();

45 'h': 
	`move_À·
();

47 'l': 
	`move_right
();

53 
	}
}

	@move.c

4 
	~"box.h
"

6 
	$move_up
()

9 i‡('#' =
m≠
[
my_x
 - 1][
my_y
])

14 i‡(' ' =
m≠
[
my_x
 - 1][
my_y
]) {

17 
m≠
[
my_x
 - 1][
my_y
] = 'w';

20 
m≠
[
my_x
][
my_y
] = ' ';

31 i‡('*' =
m≠
[
my_x
 - 1][
my_y
]) {

34 i‡('#' =
m≠
[
my_x
 - 2][
my_y
])

38 i‡(' ' =
m≠
[
my_x
 - 2][
my_y
]) {

41 
m≠
[
my_x
 - 2][
my_y
] = '*';

44 
m≠
[
my_x
 - 1][
my_y
] = 'w';

47 
m≠
[
my_x
][
my_y
] = ' ';

55 i‡('$' =
m≠
[
my_x
 - 2][
my_y
]) {

58 
m≠
[
my_x
 - 2][
my_y
] = '*';

61 
m≠
[
my_x
 - 1][
my_y
] = 'w';

64 
m≠
[
my_x
][
my_y
] = ' ';

67 
nbox
--;

71 
my_x
--;

72 
	}
}

74 
	$move_down
()

77 i‡('#' =
m≠
[
my_x
 + 1][
my_y
])

82 i‡(' ' =
m≠
[
my_x
 + 1][
my_y
]) {

85 
m≠
[
my_x
 + 1][
my_y
] = 'w';

88 
m≠
[
my_x
][
my_y
] = ' ';

98 i‡('*' =
m≠
[
my_x
 + 1][
my_y
]) {

101 i‡('#' =
m≠
[
my_x
 + 2][
my_y
])

105 i‡(' ' =
m≠
[
my_x
 + 2][
my_y
]) {

108 
m≠
[
my_x
 + 2][
my_y
] = '*';

111 
m≠
[
my_x
 + 1][
my_y
] = 'w';

114 
m≠
[
my_x
][
my_y
] = ' ';

122 i‡('$' =
m≠
[
my_x
 + 2][
my_y
]) {

125 
m≠
[
my_x
 + 2][
my_y
] = '*';

128 
m≠
[
my_x
 + 1][
my_y
] = 'w';

131 
m≠
[
my_x
][
my_y
] = ' ';

134 
nbox
--;

138 
my_x
++;

139 
	}
}

141 
	$move_À·
()

144 i‡('#' =
m≠
[
my_x
][
my_y
 - 1])

149 i‡(' ' =
m≠
[
my_x
][
my_y
 - 1]) {

152 
m≠
[
my_x
][
my_y
 - 1] = 'w';

155 
m≠
[
my_x
][
my_y
] = ' ';

165 i‡('*' =
m≠
[
my_x
][
my_y
 - 1]) {

168 i‡('#' =
m≠
[
my_x
][
my_y
 - 2])

172 i‡(' ' =
m≠
[
my_x
][
my_y
 - 2]) {

175 
m≠
[
my_x
][
my_y
 - 2] = '*';

178 
m≠
[
my_x
][
my_y
 - 1] = 'w';

181 
m≠
[
my_x
][
my_y
] = ' ';

189 i‡('$' =
m≠
[
my_x
][
my_y
 - 2]) {

192 
m≠
[
my_x
][
my_y
 - 2] = '*';

195 
m≠
[
my_x
][
my_y
 - 1] = 'w';

198 
m≠
[
my_x
][
my_y
] = ' ';

201 
nbox
--;

205 
my_y
--;

206 
	}
}

208 
	$move_right
()

211 i‡('#' =
m≠
[
my_x
][
my_y
 + 1])

216 i‡(' ' =
m≠
[
my_x
][
my_y
 + 1]) {

219 
m≠
[
my_x
][
my_y
 + 1] = 'w';

222 
m≠
[
my_x
][
my_y
] = ' ';

232 i‡('*' =
m≠
[
my_x
][
my_y
 + 1]) {

235 i‡('#' =
m≠
[
my_x
][
my_y
 + 2])

239 i‡(' ' =
m≠
[
my_x
][
my_y
 + 2]) {

242 
m≠
[
my_x
][
my_y
 + 2] = '*';

245 
m≠
[
my_x
][
my_y
 + 1] = 'w';

248 
m≠
[
my_x
][
my_y
] = ' ';

256 i‡('$' =
m≠
[
my_x
][
my_y
 + 2]) {

259 
m≠
[
my_x
][
my_y
 + 2] = '*';

262 
m≠
[
my_x
][
my_y
 + 1] = 'w';

265 
m≠
[
my_x
][
my_y
] = ' ';

268 
nbox
--;

271 
my_y
++;

272 
	}
}

	@print_map.c

4 
	~"box.h
"

5 
	~"Ælhódîs.h
"

7 
	$¥öt_m≠
()

9 
i
 = 0; i < 
MAX_WIDTH
; ++i) {

10 
j
 = 0; j < 
MAX_HIGHT
; ++j) {

11 
	`¥ötf
("%c", 
m≠
[
i
][
j
]);

13 
	`putch¨
('\n');

15 
	}
}

	@print_usage.c

4 
	~"Ælhódîs.h
"

6 
	$¥öt_ußge
()

8 
	`puts
("'#'ÑepresentsÅhe wall, '*'ÑepresentsÅhe boxes");

9 
	`puts
("'$'ÑepresentsÅhe hole, 'w'Ñepresents myself.");

10 
	}
}

	@sig_handler.c

4 
	~"Ælhódîs.h
"

6 
	$sig_h™dÀr
()

8 
	`puts
("SIGINT caught");

9 
	`puts
("Exited");

11 
	`exô
(
EXIT_SUCCESS
);

12 
	}
}

	@
1
.
0
8
75
box.h
getch.c
init.c
main.c
move.c
print_map.c
print_usage.c
sig_handler.c
